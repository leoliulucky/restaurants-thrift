/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.benxiaopao.thrift.model;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-04-24")
public class TRListOrder implements org.apache.thrift.TBase<TRListOrder, TRListOrder._Fields>, java.io.Serializable, Cloneable, Comparable<TRListOrder> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRListOrder");

  private static final org.apache.thrift.protocol.TField RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("response", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PAGINATION_FIELD_DESC = new org.apache.thrift.protocol.TField("pagination", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ORDER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("OrderList", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TRListOrderStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TRListOrderTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable TRResponse response; // required
  public @org.apache.thrift.annotation.Nullable TRPagination pagination; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<TROrder> OrderList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESPONSE((short)1, "response"),
    PAGINATION((short)2, "pagination"),
    ORDER_LIST((short)3, "OrderList");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESPONSE
          return RESPONSE;
        case 2: // PAGINATION
          return PAGINATION;
        case 3: // ORDER_LIST
          return ORDER_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("response", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRResponse.class)));
    tmpMap.put(_Fields.PAGINATION, new org.apache.thrift.meta_data.FieldMetaData("pagination", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRPagination.class)));
    tmpMap.put(_Fields.ORDER_LIST, new org.apache.thrift.meta_data.FieldMetaData("OrderList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TROrder.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRListOrder.class, metaDataMap);
  }

  public TRListOrder() {
  }

  public TRListOrder(
    TRResponse response,
    TRPagination pagination,
    java.util.List<TROrder> OrderList)
  {
    this();
    this.response = response;
    this.pagination = pagination;
    this.OrderList = OrderList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRListOrder(TRListOrder other) {
    if (other.isSetResponse()) {
      this.response = new TRResponse(other.response);
    }
    if (other.isSetPagination()) {
      this.pagination = new TRPagination(other.pagination);
    }
    if (other.isSetOrderList()) {
      java.util.List<TROrder> __this__OrderList = new java.util.ArrayList<TROrder>(other.OrderList.size());
      for (TROrder other_element : other.OrderList) {
        __this__OrderList.add(new TROrder(other_element));
      }
      this.OrderList = __this__OrderList;
    }
  }

  public TRListOrder deepCopy() {
    return new TRListOrder(this);
  }

  @Override
  public void clear() {
    this.response = null;
    this.pagination = null;
    this.OrderList = null;
  }

  @org.apache.thrift.annotation.Nullable
  public TRResponse getResponse() {
    return this.response;
  }

  public TRListOrder setResponse(@org.apache.thrift.annotation.Nullable TRResponse response) {
    this.response = response;
    return this;
  }

  public void unsetResponse() {
    this.response = null;
  }

  /** Returns true if field response is set (has been assigned a value) and false otherwise */
  public boolean isSetResponse() {
    return this.response != null;
  }

  public void setResponseIsSet(boolean value) {
    if (!value) {
      this.response = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TRPagination getPagination() {
    return this.pagination;
  }

  public TRListOrder setPagination(@org.apache.thrift.annotation.Nullable TRPagination pagination) {
    this.pagination = pagination;
    return this;
  }

  public void unsetPagination() {
    this.pagination = null;
  }

  /** Returns true if field pagination is set (has been assigned a value) and false otherwise */
  public boolean isSetPagination() {
    return this.pagination != null;
  }

  public void setPaginationIsSet(boolean value) {
    if (!value) {
      this.pagination = null;
    }
  }

  public int getOrderListSize() {
    return (this.OrderList == null) ? 0 : this.OrderList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TROrder> getOrderListIterator() {
    return (this.OrderList == null) ? null : this.OrderList.iterator();
  }

  public void addToOrderList(TROrder elem) {
    if (this.OrderList == null) {
      this.OrderList = new java.util.ArrayList<TROrder>();
    }
    this.OrderList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TROrder> getOrderList() {
    return this.OrderList;
  }

  public TRListOrder setOrderList(@org.apache.thrift.annotation.Nullable java.util.List<TROrder> OrderList) {
    this.OrderList = OrderList;
    return this;
  }

  public void unsetOrderList() {
    this.OrderList = null;
  }

  /** Returns true if field OrderList is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderList() {
    return this.OrderList != null;
  }

  public void setOrderListIsSet(boolean value) {
    if (!value) {
      this.OrderList = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case RESPONSE:
      if (value == null) {
        unsetResponse();
      } else {
        setResponse((TRResponse)value);
      }
      break;

    case PAGINATION:
      if (value == null) {
        unsetPagination();
      } else {
        setPagination((TRPagination)value);
      }
      break;

    case ORDER_LIST:
      if (value == null) {
        unsetOrderList();
      } else {
        setOrderList((java.util.List<TROrder>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESPONSE:
      return getResponse();

    case PAGINATION:
      return getPagination();

    case ORDER_LIST:
      return getOrderList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESPONSE:
      return isSetResponse();
    case PAGINATION:
      return isSetPagination();
    case ORDER_LIST:
      return isSetOrderList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TRListOrder)
      return this.equals((TRListOrder)that);
    return false;
  }

  public boolean equals(TRListOrder that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_response = true && this.isSetResponse();
    boolean that_present_response = true && that.isSetResponse();
    if (this_present_response || that_present_response) {
      if (!(this_present_response && that_present_response))
        return false;
      if (!this.response.equals(that.response))
        return false;
    }

    boolean this_present_pagination = true && this.isSetPagination();
    boolean that_present_pagination = true && that.isSetPagination();
    if (this_present_pagination || that_present_pagination) {
      if (!(this_present_pagination && that_present_pagination))
        return false;
      if (!this.pagination.equals(that.pagination))
        return false;
    }

    boolean this_present_OrderList = true && this.isSetOrderList();
    boolean that_present_OrderList = true && that.isSetOrderList();
    if (this_present_OrderList || that_present_OrderList) {
      if (!(this_present_OrderList && that_present_OrderList))
        return false;
      if (!this.OrderList.equals(that.OrderList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetResponse()) ? 131071 : 524287);
    if (isSetResponse())
      hashCode = hashCode * 8191 + response.hashCode();

    hashCode = hashCode * 8191 + ((isSetPagination()) ? 131071 : 524287);
    if (isSetPagination())
      hashCode = hashCode * 8191 + pagination.hashCode();

    hashCode = hashCode * 8191 + ((isSetOrderList()) ? 131071 : 524287);
    if (isSetOrderList())
      hashCode = hashCode * 8191 + OrderList.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TRListOrder other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResponse()).compareTo(other.isSetResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.response, other.response);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPagination()).compareTo(other.isSetPagination());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPagination()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pagination, other.pagination);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderList()).compareTo(other.isSetOrderList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.OrderList, other.OrderList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TRListOrder(");
    boolean first = true;

    sb.append("response:");
    if (this.response == null) {
      sb.append("null");
    } else {
      sb.append(this.response);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pagination:");
    if (this.pagination == null) {
      sb.append("null");
    } else {
      sb.append(this.pagination);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("OrderList:");
    if (this.OrderList == null) {
      sb.append("null");
    } else {
      sb.append(this.OrderList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (response != null) {
      response.validate();
    }
    if (pagination != null) {
      pagination.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRListOrderStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TRListOrderStandardScheme getScheme() {
      return new TRListOrderStandardScheme();
    }
  }

  private static class TRListOrderStandardScheme extends org.apache.thrift.scheme.StandardScheme<TRListOrder> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TRListOrder struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.response = new TRResponse();
              struct.response.read(iprot);
              struct.setResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAGINATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pagination = new TRPagination();
              struct.pagination.read(iprot);
              struct.setPaginationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORDER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.OrderList = new java.util.ArrayList<TROrder>(_list0.size);
                @org.apache.thrift.annotation.Nullable TROrder _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new TROrder();
                  _elem1.read(iprot);
                  struct.OrderList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setOrderListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TRListOrder struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.response != null) {
        oprot.writeFieldBegin(RESPONSE_FIELD_DESC);
        struct.response.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.pagination != null) {
        oprot.writeFieldBegin(PAGINATION_FIELD_DESC);
        struct.pagination.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.OrderList != null) {
        oprot.writeFieldBegin(ORDER_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.OrderList.size()));
          for (TROrder _iter3 : struct.OrderList)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRListOrderTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TRListOrderTupleScheme getScheme() {
      return new TRListOrderTupleScheme();
    }
  }

  private static class TRListOrderTupleScheme extends org.apache.thrift.scheme.TupleScheme<TRListOrder> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRListOrder struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetResponse()) {
        optionals.set(0);
      }
      if (struct.isSetPagination()) {
        optionals.set(1);
      }
      if (struct.isSetOrderList()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetResponse()) {
        struct.response.write(oprot);
      }
      if (struct.isSetPagination()) {
        struct.pagination.write(oprot);
      }
      if (struct.isSetOrderList()) {
        {
          oprot.writeI32(struct.OrderList.size());
          for (TROrder _iter4 : struct.OrderList)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRListOrder struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.response = new TRResponse();
        struct.response.read(iprot);
        struct.setResponseIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pagination = new TRPagination();
        struct.pagination.read(iprot);
        struct.setPaginationIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.OrderList = new java.util.ArrayList<TROrder>(_list5.size);
          @org.apache.thrift.annotation.Nullable TROrder _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new TROrder();
            _elem6.read(iprot);
            struct.OrderList.add(_elem6);
          }
        }
        struct.setOrderListIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

