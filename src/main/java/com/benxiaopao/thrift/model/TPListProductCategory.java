/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.benxiaopao.thrift.model;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-04-24")
public class TPListProductCategory implements org.apache.thrift.TBase<TPListProductCategory, TPListProductCategory._Fields>, java.io.Serializable, Cloneable, Comparable<TPListProductCategory> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPListProductCategory");

  private static final org.apache.thrift.protocol.TField PAGINATION_FIELD_DESC = new org.apache.thrift.protocol.TField("pagination", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PRODUCT_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("productCategory", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TPListProductCategoryStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TPListProductCategoryTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable TPPagination pagination; // required
  public @org.apache.thrift.annotation.Nullable TPProductCategory productCategory; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PAGINATION((short)1, "pagination"),
    PRODUCT_CATEGORY((short)2, "productCategory");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAGINATION
          return PAGINATION;
        case 2: // PRODUCT_CATEGORY
          return PRODUCT_CATEGORY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAGINATION, new org.apache.thrift.meta_data.FieldMetaData("pagination", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPPagination.class)));
    tmpMap.put(_Fields.PRODUCT_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("productCategory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPProductCategory.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPListProductCategory.class, metaDataMap);
  }

  public TPListProductCategory() {
  }

  public TPListProductCategory(
    TPPagination pagination,
    TPProductCategory productCategory)
  {
    this();
    this.pagination = pagination;
    this.productCategory = productCategory;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPListProductCategory(TPListProductCategory other) {
    if (other.isSetPagination()) {
      this.pagination = new TPPagination(other.pagination);
    }
    if (other.isSetProductCategory()) {
      this.productCategory = new TPProductCategory(other.productCategory);
    }
  }

  public TPListProductCategory deepCopy() {
    return new TPListProductCategory(this);
  }

  @Override
  public void clear() {
    this.pagination = null;
    this.productCategory = null;
  }

  @org.apache.thrift.annotation.Nullable
  public TPPagination getPagination() {
    return this.pagination;
  }

  public TPListProductCategory setPagination(@org.apache.thrift.annotation.Nullable TPPagination pagination) {
    this.pagination = pagination;
    return this;
  }

  public void unsetPagination() {
    this.pagination = null;
  }

  /** Returns true if field pagination is set (has been assigned a value) and false otherwise */
  public boolean isSetPagination() {
    return this.pagination != null;
  }

  public void setPaginationIsSet(boolean value) {
    if (!value) {
      this.pagination = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TPProductCategory getProductCategory() {
    return this.productCategory;
  }

  public TPListProductCategory setProductCategory(@org.apache.thrift.annotation.Nullable TPProductCategory productCategory) {
    this.productCategory = productCategory;
    return this;
  }

  public void unsetProductCategory() {
    this.productCategory = null;
  }

  /** Returns true if field productCategory is set (has been assigned a value) and false otherwise */
  public boolean isSetProductCategory() {
    return this.productCategory != null;
  }

  public void setProductCategoryIsSet(boolean value) {
    if (!value) {
      this.productCategory = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case PAGINATION:
      if (value == null) {
        unsetPagination();
      } else {
        setPagination((TPPagination)value);
      }
      break;

    case PRODUCT_CATEGORY:
      if (value == null) {
        unsetProductCategory();
      } else {
        setProductCategory((TPProductCategory)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAGINATION:
      return getPagination();

    case PRODUCT_CATEGORY:
      return getProductCategory();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAGINATION:
      return isSetPagination();
    case PRODUCT_CATEGORY:
      return isSetProductCategory();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPListProductCategory)
      return this.equals((TPListProductCategory)that);
    return false;
  }

  public boolean equals(TPListProductCategory that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_pagination = true && this.isSetPagination();
    boolean that_present_pagination = true && that.isSetPagination();
    if (this_present_pagination || that_present_pagination) {
      if (!(this_present_pagination && that_present_pagination))
        return false;
      if (!this.pagination.equals(that.pagination))
        return false;
    }

    boolean this_present_productCategory = true && this.isSetProductCategory();
    boolean that_present_productCategory = true && that.isSetProductCategory();
    if (this_present_productCategory || that_present_productCategory) {
      if (!(this_present_productCategory && that_present_productCategory))
        return false;
      if (!this.productCategory.equals(that.productCategory))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPagination()) ? 131071 : 524287);
    if (isSetPagination())
      hashCode = hashCode * 8191 + pagination.hashCode();

    hashCode = hashCode * 8191 + ((isSetProductCategory()) ? 131071 : 524287);
    if (isSetProductCategory())
      hashCode = hashCode * 8191 + productCategory.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TPListProductCategory other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPagination()).compareTo(other.isSetPagination());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPagination()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pagination, other.pagination);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductCategory()).compareTo(other.isSetProductCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCategory, other.productCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPListProductCategory(");
    boolean first = true;

    sb.append("pagination:");
    if (this.pagination == null) {
      sb.append("null");
    } else {
      sb.append(this.pagination);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productCategory:");
    if (this.productCategory == null) {
      sb.append("null");
    } else {
      sb.append(this.productCategory);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (pagination != null) {
      pagination.validate();
    }
    if (productCategory != null) {
      productCategory.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPListProductCategoryStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPListProductCategoryStandardScheme getScheme() {
      return new TPListProductCategoryStandardScheme();
    }
  }

  private static class TPListProductCategoryStandardScheme extends org.apache.thrift.scheme.StandardScheme<TPListProductCategory> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPListProductCategory struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAGINATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pagination = new TPPagination();
              struct.pagination.read(iprot);
              struct.setPaginationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRODUCT_CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.productCategory = new TPProductCategory();
              struct.productCategory.read(iprot);
              struct.setProductCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPListProductCategory struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pagination != null) {
        oprot.writeFieldBegin(PAGINATION_FIELD_DESC);
        struct.pagination.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.productCategory != null) {
        oprot.writeFieldBegin(PRODUCT_CATEGORY_FIELD_DESC);
        struct.productCategory.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPListProductCategoryTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPListProductCategoryTupleScheme getScheme() {
      return new TPListProductCategoryTupleScheme();
    }
  }

  private static class TPListProductCategoryTupleScheme extends org.apache.thrift.scheme.TupleScheme<TPListProductCategory> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPListProductCategory struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPagination()) {
        optionals.set(0);
      }
      if (struct.isSetProductCategory()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetPagination()) {
        struct.pagination.write(oprot);
      }
      if (struct.isSetProductCategory()) {
        struct.productCategory.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPListProductCategory struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.pagination = new TPPagination();
        struct.pagination.read(iprot);
        struct.setPaginationIsSet(true);
      }
      if (incoming.get(1)) {
        struct.productCategory = new TPProductCategory();
        struct.productCategory.read(iprot);
        struct.setProductCategoryIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

