/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.benxiaopao.thrift.model;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-04-24")
public class TPProductCategory implements org.apache.thrift.TBase<TPProductCategory, TPProductCategory._Fields>, java.io.Serializable, Cloneable, Comparable<TPProductCategory> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPProductCategory");

  private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CATEGORY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CATEGORY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField RESTAURANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("restaurantId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TPProductCategoryStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TPProductCategoryTupleSchemeFactory();

  public int categoryId; // required
  public @org.apache.thrift.annotation.Nullable String categoryName; // required
  public int categoryType; // required
  public int restaurantId; // required
  public long createTime; // required
  public long updateTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CATEGORY_ID((short)1, "categoryId"),
    CATEGORY_NAME((short)2, "categoryName"),
    CATEGORY_TYPE((short)3, "categoryType"),
    RESTAURANT_ID((short)4, "restaurantId"),
    CREATE_TIME((short)5, "createTime"),
    UPDATE_TIME((short)6, "updateTime");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CATEGORY_ID
          return CATEGORY_ID;
        case 2: // CATEGORY_NAME
          return CATEGORY_NAME;
        case 3: // CATEGORY_TYPE
          return CATEGORY_TYPE;
        case 4: // RESTAURANT_ID
          return RESTAURANT_ID;
        case 5: // CREATE_TIME
          return CREATE_TIME;
        case 6: // UPDATE_TIME
          return UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CATEGORYID_ISSET_ID = 0;
  private static final int __CATEGORYTYPE_ISSET_ID = 1;
  private static final int __RESTAURANTID_ISSET_ID = 2;
  private static final int __CREATETIME_ISSET_ID = 3;
  private static final int __UPDATETIME_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CATEGORY_NAME, new org.apache.thrift.meta_data.FieldMetaData("categoryName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATEGORY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("categoryType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RESTAURANT_ID, new org.apache.thrift.meta_data.FieldMetaData("restaurantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPProductCategory.class, metaDataMap);
  }

  public TPProductCategory() {
  }

  public TPProductCategory(
    int categoryId,
    String categoryName,
    int categoryType,
    int restaurantId,
    long createTime,
    long updateTime)
  {
    this();
    this.categoryId = categoryId;
    setCategoryIdIsSet(true);
    this.categoryName = categoryName;
    this.categoryType = categoryType;
    setCategoryTypeIsSet(true);
    this.restaurantId = restaurantId;
    setRestaurantIdIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPProductCategory(TPProductCategory other) {
    __isset_bitfield = other.__isset_bitfield;
    this.categoryId = other.categoryId;
    if (other.isSetCategoryName()) {
      this.categoryName = other.categoryName;
    }
    this.categoryType = other.categoryType;
    this.restaurantId = other.restaurantId;
    this.createTime = other.createTime;
    this.updateTime = other.updateTime;
  }

  public TPProductCategory deepCopy() {
    return new TPProductCategory(this);
  }

  @Override
  public void clear() {
    setCategoryIdIsSet(false);
    this.categoryId = 0;
    this.categoryName = null;
    setCategoryTypeIsSet(false);
    this.categoryType = 0;
    setRestaurantIdIsSet(false);
    this.restaurantId = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
  }

  public int getCategoryId() {
    return this.categoryId;
  }

  public TPProductCategory setCategoryId(int categoryId) {
    this.categoryId = categoryId;
    setCategoryIdIsSet(true);
    return this;
  }

  public void unsetCategoryId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
  }

  /** Returns true if field categoryId is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
  }

  public void setCategoryIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CATEGORYID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getCategoryName() {
    return this.categoryName;
  }

  public TPProductCategory setCategoryName(@org.apache.thrift.annotation.Nullable String categoryName) {
    this.categoryName = categoryName;
    return this;
  }

  public void unsetCategoryName() {
    this.categoryName = null;
  }

  /** Returns true if field categoryName is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryName() {
    return this.categoryName != null;
  }

  public void setCategoryNameIsSet(boolean value) {
    if (!value) {
      this.categoryName = null;
    }
  }

  public int getCategoryType() {
    return this.categoryType;
  }

  public TPProductCategory setCategoryType(int categoryType) {
    this.categoryType = categoryType;
    setCategoryTypeIsSet(true);
    return this;
  }

  public void unsetCategoryType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CATEGORYTYPE_ISSET_ID);
  }

  /** Returns true if field categoryType is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CATEGORYTYPE_ISSET_ID);
  }

  public void setCategoryTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CATEGORYTYPE_ISSET_ID, value);
  }

  public int getRestaurantId() {
    return this.restaurantId;
  }

  public TPProductCategory setRestaurantId(int restaurantId) {
    this.restaurantId = restaurantId;
    setRestaurantIdIsSet(true);
    return this;
  }

  public void unsetRestaurantId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESTAURANTID_ISSET_ID);
  }

  /** Returns true if field restaurantId is set (has been assigned a value) and false otherwise */
  public boolean isSetRestaurantId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESTAURANTID_ISSET_ID);
  }

  public void setRestaurantIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESTAURANTID_ISSET_ID, value);
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public TPProductCategory setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public long getUpdateTime() {
    return this.updateTime;
  }

  public TPProductCategory setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case CATEGORY_ID:
      if (value == null) {
        unsetCategoryId();
      } else {
        setCategoryId((Integer)value);
      }
      break;

    case CATEGORY_NAME:
      if (value == null) {
        unsetCategoryName();
      } else {
        setCategoryName((String)value);
      }
      break;

    case CATEGORY_TYPE:
      if (value == null) {
        unsetCategoryType();
      } else {
        setCategoryType((Integer)value);
      }
      break;

    case RESTAURANT_ID:
      if (value == null) {
        unsetRestaurantId();
      } else {
        setRestaurantId((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CATEGORY_ID:
      return getCategoryId();

    case CATEGORY_NAME:
      return getCategoryName();

    case CATEGORY_TYPE:
      return getCategoryType();

    case RESTAURANT_ID:
      return getRestaurantId();

    case CREATE_TIME:
      return getCreateTime();

    case UPDATE_TIME:
      return getUpdateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CATEGORY_ID:
      return isSetCategoryId();
    case CATEGORY_NAME:
      return isSetCategoryName();
    case CATEGORY_TYPE:
      return isSetCategoryType();
    case RESTAURANT_ID:
      return isSetRestaurantId();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPProductCategory)
      return this.equals((TPProductCategory)that);
    return false;
  }

  public boolean equals(TPProductCategory that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_categoryId = true;
    boolean that_present_categoryId = true;
    if (this_present_categoryId || that_present_categoryId) {
      if (!(this_present_categoryId && that_present_categoryId))
        return false;
      if (this.categoryId != that.categoryId)
        return false;
    }

    boolean this_present_categoryName = true && this.isSetCategoryName();
    boolean that_present_categoryName = true && that.isSetCategoryName();
    if (this_present_categoryName || that_present_categoryName) {
      if (!(this_present_categoryName && that_present_categoryName))
        return false;
      if (!this.categoryName.equals(that.categoryName))
        return false;
    }

    boolean this_present_categoryType = true;
    boolean that_present_categoryType = true;
    if (this_present_categoryType || that_present_categoryType) {
      if (!(this_present_categoryType && that_present_categoryType))
        return false;
      if (this.categoryType != that.categoryType)
        return false;
    }

    boolean this_present_restaurantId = true;
    boolean that_present_restaurantId = true;
    if (this_present_restaurantId || that_present_restaurantId) {
      if (!(this_present_restaurantId && that_present_restaurantId))
        return false;
      if (this.restaurantId != that.restaurantId)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + categoryId;

    hashCode = hashCode * 8191 + ((isSetCategoryName()) ? 131071 : 524287);
    if (isSetCategoryName())
      hashCode = hashCode * 8191 + categoryName.hashCode();

    hashCode = hashCode * 8191 + categoryType;

    hashCode = hashCode * 8191 + restaurantId;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(createTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(updateTime);

    return hashCode;
  }

  @Override
  public int compareTo(TPProductCategory other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCategoryId()).compareTo(other.isSetCategoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, other.categoryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryName()).compareTo(other.isSetCategoryName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryName, other.categoryName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryType()).compareTo(other.isSetCategoryType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryType, other.categoryType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRestaurantId()).compareTo(other.isSetRestaurantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRestaurantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.restaurantId, other.restaurantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPProductCategory(");
    boolean first = true;

    sb.append("categoryId:");
    sb.append(this.categoryId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("categoryName:");
    if (this.categoryName == null) {
      sb.append("null");
    } else {
      sb.append(this.categoryName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("categoryType:");
    sb.append(this.categoryType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("restaurantId:");
    sb.append(this.restaurantId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPProductCategoryStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPProductCategoryStandardScheme getScheme() {
      return new TPProductCategoryStandardScheme();
    }
  }

  private static class TPProductCategoryStandardScheme extends org.apache.thrift.scheme.StandardScheme<TPProductCategory> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPProductCategory struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CATEGORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.categoryId = iprot.readI32();
              struct.setCategoryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CATEGORY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.categoryName = iprot.readString();
              struct.setCategoryNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CATEGORY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.categoryType = iprot.readI32();
              struct.setCategoryTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RESTAURANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.restaurantId = iprot.readI32();
              struct.setRestaurantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPProductCategory struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
      oprot.writeI32(struct.categoryId);
      oprot.writeFieldEnd();
      if (struct.categoryName != null) {
        oprot.writeFieldBegin(CATEGORY_NAME_FIELD_DESC);
        oprot.writeString(struct.categoryName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CATEGORY_TYPE_FIELD_DESC);
      oprot.writeI32(struct.categoryType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESTAURANT_ID_FIELD_DESC);
      oprot.writeI32(struct.restaurantId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.updateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPProductCategoryTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPProductCategoryTupleScheme getScheme() {
      return new TPProductCategoryTupleScheme();
    }
  }

  private static class TPProductCategoryTupleScheme extends org.apache.thrift.scheme.TupleScheme<TPProductCategory> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPProductCategory struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCategoryId()) {
        optionals.set(0);
      }
      if (struct.isSetCategoryName()) {
        optionals.set(1);
      }
      if (struct.isSetCategoryType()) {
        optionals.set(2);
      }
      if (struct.isSetRestaurantId()) {
        optionals.set(3);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(4);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetCategoryId()) {
        oprot.writeI32(struct.categoryId);
      }
      if (struct.isSetCategoryName()) {
        oprot.writeString(struct.categoryName);
      }
      if (struct.isSetCategoryType()) {
        oprot.writeI32(struct.categoryType);
      }
      if (struct.isSetRestaurantId()) {
        oprot.writeI32(struct.restaurantId);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPProductCategory struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.categoryId = iprot.readI32();
        struct.setCategoryIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.categoryName = iprot.readString();
        struct.setCategoryNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.categoryType = iprot.readI32();
        struct.setCategoryTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.restaurantId = iprot.readI32();
        struct.setRestaurantIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

