/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.benxiaopao.thrift.model;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-04-24")
public class TROrder implements org.apache.thrift.TBase<TROrder, TROrder._Fields>, java.io.Serializable, Cloneable, Comparable<TROrder> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TROrder");

  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("payType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_AMOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalAmout", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField REAL_TOTAL_AMOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("realTotalAmout", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField SHIPMENT_EXPENSE_FIELD_DESC = new org.apache.thrift.protocol.TField("shipmentExpense", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField ORDER_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("orderStatus", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ORDER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderType", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ORDER_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("orderFrom", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField P_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pOrderId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField BUYER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField CONSIGNEE_FIELD_DESC = new org.apache.thrift.protocol.TField("consignee", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PROVINCE_FIELD_DESC = new org.apache.thrift.protocol.TField("province", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField DISTRICT_FIELD_DESC = new org.apache.thrift.protocol.TField("district", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField TEL_FIELD_DESC = new org.apache.thrift.protocol.TField("tel", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)18);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TROrderStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TROrderTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable String orderId; // required
  public int payType; // required
  public double totalAmout; // required
  public double realTotalAmout; // required
  public double shipmentExpense; // required
  public int orderStatus; // required
  public int orderType; // required
  public int orderFrom; // required
  public @org.apache.thrift.annotation.Nullable String pOrderId; // required
  public int buyerId; // required
  public @org.apache.thrift.annotation.Nullable String consignee; // required
  public int province; // required
  public int city; // required
  public int district; // required
  public @org.apache.thrift.annotation.Nullable String address; // required
  public @org.apache.thrift.annotation.Nullable String tel; // required
  public long createTime; // required
  public long updateTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORDER_ID((short)1, "orderId"),
    PAY_TYPE((short)2, "payType"),
    TOTAL_AMOUT((short)3, "totalAmout"),
    REAL_TOTAL_AMOUT((short)4, "realTotalAmout"),
    SHIPMENT_EXPENSE((short)5, "shipmentExpense"),
    ORDER_STATUS((short)6, "orderStatus"),
    ORDER_TYPE((short)7, "orderType"),
    ORDER_FROM((short)8, "orderFrom"),
    P_ORDER_ID((short)9, "pOrderId"),
    BUYER_ID((short)10, "buyerId"),
    CONSIGNEE((short)11, "consignee"),
    PROVINCE((short)12, "province"),
    CITY((short)13, "city"),
    DISTRICT((short)14, "district"),
    ADDRESS((short)15, "address"),
    TEL((short)16, "tel"),
    CREATE_TIME((short)17, "createTime"),
    UPDATE_TIME((short)18, "updateTime");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
          return ORDER_ID;
        case 2: // PAY_TYPE
          return PAY_TYPE;
        case 3: // TOTAL_AMOUT
          return TOTAL_AMOUT;
        case 4: // REAL_TOTAL_AMOUT
          return REAL_TOTAL_AMOUT;
        case 5: // SHIPMENT_EXPENSE
          return SHIPMENT_EXPENSE;
        case 6: // ORDER_STATUS
          return ORDER_STATUS;
        case 7: // ORDER_TYPE
          return ORDER_TYPE;
        case 8: // ORDER_FROM
          return ORDER_FROM;
        case 9: // P_ORDER_ID
          return P_ORDER_ID;
        case 10: // BUYER_ID
          return BUYER_ID;
        case 11: // CONSIGNEE
          return CONSIGNEE;
        case 12: // PROVINCE
          return PROVINCE;
        case 13: // CITY
          return CITY;
        case 14: // DISTRICT
          return DISTRICT;
        case 15: // ADDRESS
          return ADDRESS;
        case 16: // TEL
          return TEL;
        case 17: // CREATE_TIME
          return CREATE_TIME;
        case 18: // UPDATE_TIME
          return UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAYTYPE_ISSET_ID = 0;
  private static final int __TOTALAMOUT_ISSET_ID = 1;
  private static final int __REALTOTALAMOUT_ISSET_ID = 2;
  private static final int __SHIPMENTEXPENSE_ISSET_ID = 3;
  private static final int __ORDERSTATUS_ISSET_ID = 4;
  private static final int __ORDERTYPE_ISSET_ID = 5;
  private static final int __ORDERFROM_ISSET_ID = 6;
  private static final int __BUYERID_ISSET_ID = 7;
  private static final int __PROVINCE_ISSET_ID = 8;
  private static final int __CITY_ISSET_ID = 9;
  private static final int __DISTRICT_ISSET_ID = 10;
  private static final int __CREATETIME_ISSET_ID = 11;
  private static final int __UPDATETIME_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("payType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_AMOUT, new org.apache.thrift.meta_data.FieldMetaData("totalAmout", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REAL_TOTAL_AMOUT, new org.apache.thrift.meta_data.FieldMetaData("realTotalAmout", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHIPMENT_EXPENSE, new org.apache.thrift.meta_data.FieldMetaData("shipmentExpense", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ORDER_STATUS, new org.apache.thrift.meta_data.FieldMetaData("orderStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("orderType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_FROM, new org.apache.thrift.meta_data.FieldMetaData("orderFrom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.P_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("pOrderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUYER_ID, new org.apache.thrift.meta_data.FieldMetaData("buyerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONSIGNEE, new org.apache.thrift.meta_data.FieldMetaData("consignee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROVINCE, new org.apache.thrift.meta_data.FieldMetaData("province", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DISTRICT, new org.apache.thrift.meta_data.FieldMetaData("district", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEL, new org.apache.thrift.meta_data.FieldMetaData("tel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TROrder.class, metaDataMap);
  }

  public TROrder() {
  }

  public TROrder(
    String orderId,
    int payType,
    double totalAmout,
    double realTotalAmout,
    double shipmentExpense,
    int orderStatus,
    int orderType,
    int orderFrom,
    String pOrderId,
    int buyerId,
    String consignee,
    int province,
    int city,
    int district,
    String address,
    String tel,
    long createTime,
    long updateTime)
  {
    this();
    this.orderId = orderId;
    this.payType = payType;
    setPayTypeIsSet(true);
    this.totalAmout = totalAmout;
    setTotalAmoutIsSet(true);
    this.realTotalAmout = realTotalAmout;
    setRealTotalAmoutIsSet(true);
    this.shipmentExpense = shipmentExpense;
    setShipmentExpenseIsSet(true);
    this.orderStatus = orderStatus;
    setOrderStatusIsSet(true);
    this.orderType = orderType;
    setOrderTypeIsSet(true);
    this.orderFrom = orderFrom;
    setOrderFromIsSet(true);
    this.pOrderId = pOrderId;
    this.buyerId = buyerId;
    setBuyerIdIsSet(true);
    this.consignee = consignee;
    this.province = province;
    setProvinceIsSet(true);
    this.city = city;
    setCityIsSet(true);
    this.district = district;
    setDistrictIsSet(true);
    this.address = address;
    this.tel = tel;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TROrder(TROrder other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    this.payType = other.payType;
    this.totalAmout = other.totalAmout;
    this.realTotalAmout = other.realTotalAmout;
    this.shipmentExpense = other.shipmentExpense;
    this.orderStatus = other.orderStatus;
    this.orderType = other.orderType;
    this.orderFrom = other.orderFrom;
    if (other.isSetPOrderId()) {
      this.pOrderId = other.pOrderId;
    }
    this.buyerId = other.buyerId;
    if (other.isSetConsignee()) {
      this.consignee = other.consignee;
    }
    this.province = other.province;
    this.city = other.city;
    this.district = other.district;
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    if (other.isSetTel()) {
      this.tel = other.tel;
    }
    this.createTime = other.createTime;
    this.updateTime = other.updateTime;
  }

  public TROrder deepCopy() {
    return new TROrder(this);
  }

  @Override
  public void clear() {
    this.orderId = null;
    setPayTypeIsSet(false);
    this.payType = 0;
    setTotalAmoutIsSet(false);
    this.totalAmout = 0.0;
    setRealTotalAmoutIsSet(false);
    this.realTotalAmout = 0.0;
    setShipmentExpenseIsSet(false);
    this.shipmentExpense = 0.0;
    setOrderStatusIsSet(false);
    this.orderStatus = 0;
    setOrderTypeIsSet(false);
    this.orderType = 0;
    setOrderFromIsSet(false);
    this.orderFrom = 0;
    this.pOrderId = null;
    setBuyerIdIsSet(false);
    this.buyerId = 0;
    this.consignee = null;
    setProvinceIsSet(false);
    this.province = 0;
    setCityIsSet(false);
    this.city = 0;
    setDistrictIsSet(false);
    this.district = 0;
    this.address = null;
    this.tel = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public String getOrderId() {
    return this.orderId;
  }

  public TROrder setOrderId(@org.apache.thrift.annotation.Nullable String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  public int getPayType() {
    return this.payType;
  }

  public TROrder setPayType(int payType) {
    this.payType = payType;
    setPayTypeIsSet(true);
    return this;
  }

  public void unsetPayType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAYTYPE_ISSET_ID);
  }

  /** Returns true if field payType is set (has been assigned a value) and false otherwise */
  public boolean isSetPayType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAYTYPE_ISSET_ID);
  }

  public void setPayTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAYTYPE_ISSET_ID, value);
  }

  public double getTotalAmout() {
    return this.totalAmout;
  }

  public TROrder setTotalAmout(double totalAmout) {
    this.totalAmout = totalAmout;
    setTotalAmoutIsSet(true);
    return this;
  }

  public void unsetTotalAmout() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALAMOUT_ISSET_ID);
  }

  /** Returns true if field totalAmout is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalAmout() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALAMOUT_ISSET_ID);
  }

  public void setTotalAmoutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALAMOUT_ISSET_ID, value);
  }

  public double getRealTotalAmout() {
    return this.realTotalAmout;
  }

  public TROrder setRealTotalAmout(double realTotalAmout) {
    this.realTotalAmout = realTotalAmout;
    setRealTotalAmoutIsSet(true);
    return this;
  }

  public void unsetRealTotalAmout() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REALTOTALAMOUT_ISSET_ID);
  }

  /** Returns true if field realTotalAmout is set (has been assigned a value) and false otherwise */
  public boolean isSetRealTotalAmout() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REALTOTALAMOUT_ISSET_ID);
  }

  public void setRealTotalAmoutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REALTOTALAMOUT_ISSET_ID, value);
  }

  public double getShipmentExpense() {
    return this.shipmentExpense;
  }

  public TROrder setShipmentExpense(double shipmentExpense) {
    this.shipmentExpense = shipmentExpense;
    setShipmentExpenseIsSet(true);
    return this;
  }

  public void unsetShipmentExpense() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHIPMENTEXPENSE_ISSET_ID);
  }

  /** Returns true if field shipmentExpense is set (has been assigned a value) and false otherwise */
  public boolean isSetShipmentExpense() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHIPMENTEXPENSE_ISSET_ID);
  }

  public void setShipmentExpenseIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHIPMENTEXPENSE_ISSET_ID, value);
  }

  public int getOrderStatus() {
    return this.orderStatus;
  }

  public TROrder setOrderStatus(int orderStatus) {
    this.orderStatus = orderStatus;
    setOrderStatusIsSet(true);
    return this;
  }

  public void unsetOrderStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ORDERSTATUS_ISSET_ID);
  }

  /** Returns true if field orderStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ORDERSTATUS_ISSET_ID);
  }

  public void setOrderStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ORDERSTATUS_ISSET_ID, value);
  }

  public int getOrderType() {
    return this.orderType;
  }

  public TROrder setOrderType(int orderType) {
    this.orderType = orderType;
    setOrderTypeIsSet(true);
    return this;
  }

  public void unsetOrderType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ORDERTYPE_ISSET_ID);
  }

  /** Returns true if field orderType is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ORDERTYPE_ISSET_ID);
  }

  public void setOrderTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ORDERTYPE_ISSET_ID, value);
  }

  public int getOrderFrom() {
    return this.orderFrom;
  }

  public TROrder setOrderFrom(int orderFrom) {
    this.orderFrom = orderFrom;
    setOrderFromIsSet(true);
    return this;
  }

  public void unsetOrderFrom() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ORDERFROM_ISSET_ID);
  }

  /** Returns true if field orderFrom is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderFrom() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ORDERFROM_ISSET_ID);
  }

  public void setOrderFromIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ORDERFROM_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getPOrderId() {
    return this.pOrderId;
  }

  public TROrder setPOrderId(@org.apache.thrift.annotation.Nullable String pOrderId) {
    this.pOrderId = pOrderId;
    return this;
  }

  public void unsetPOrderId() {
    this.pOrderId = null;
  }

  /** Returns true if field pOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetPOrderId() {
    return this.pOrderId != null;
  }

  public void setPOrderIdIsSet(boolean value) {
    if (!value) {
      this.pOrderId = null;
    }
  }

  public int getBuyerId() {
    return this.buyerId;
  }

  public TROrder setBuyerId(int buyerId) {
    this.buyerId = buyerId;
    setBuyerIdIsSet(true);
    return this;
  }

  public void unsetBuyerId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BUYERID_ISSET_ID);
  }

  /** Returns true if field buyerId is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BUYERID_ISSET_ID);
  }

  public void setBuyerIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BUYERID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getConsignee() {
    return this.consignee;
  }

  public TROrder setConsignee(@org.apache.thrift.annotation.Nullable String consignee) {
    this.consignee = consignee;
    return this;
  }

  public void unsetConsignee() {
    this.consignee = null;
  }

  /** Returns true if field consignee is set (has been assigned a value) and false otherwise */
  public boolean isSetConsignee() {
    return this.consignee != null;
  }

  public void setConsigneeIsSet(boolean value) {
    if (!value) {
      this.consignee = null;
    }
  }

  public int getProvince() {
    return this.province;
  }

  public TROrder setProvince(int province) {
    this.province = province;
    setProvinceIsSet(true);
    return this;
  }

  public void unsetProvince() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROVINCE_ISSET_ID);
  }

  /** Returns true if field province is set (has been assigned a value) and false otherwise */
  public boolean isSetProvince() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROVINCE_ISSET_ID);
  }

  public void setProvinceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROVINCE_ISSET_ID, value);
  }

  public int getCity() {
    return this.city;
  }

  public TROrder setCity(int city) {
    this.city = city;
    setCityIsSet(true);
    return this;
  }

  public void unsetCity() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CITY_ISSET_ID);
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CITY_ISSET_ID);
  }

  public void setCityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CITY_ISSET_ID, value);
  }

  public int getDistrict() {
    return this.district;
  }

  public TROrder setDistrict(int district) {
    this.district = district;
    setDistrictIsSet(true);
    return this;
  }

  public void unsetDistrict() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISTRICT_ISSET_ID);
  }

  /** Returns true if field district is set (has been assigned a value) and false otherwise */
  public boolean isSetDistrict() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISTRICT_ISSET_ID);
  }

  public void setDistrictIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISTRICT_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getAddress() {
    return this.address;
  }

  public TROrder setAddress(@org.apache.thrift.annotation.Nullable String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getTel() {
    return this.tel;
  }

  public TROrder setTel(@org.apache.thrift.annotation.Nullable String tel) {
    this.tel = tel;
    return this;
  }

  public void unsetTel() {
    this.tel = null;
  }

  /** Returns true if field tel is set (has been assigned a value) and false otherwise */
  public boolean isSetTel() {
    return this.tel != null;
  }

  public void setTelIsSet(boolean value) {
    if (!value) {
      this.tel = null;
    }
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public TROrder setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public long getUpdateTime() {
    return this.updateTime;
  }

  public TROrder setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case PAY_TYPE:
      if (value == null) {
        unsetPayType();
      } else {
        setPayType((Integer)value);
      }
      break;

    case TOTAL_AMOUT:
      if (value == null) {
        unsetTotalAmout();
      } else {
        setTotalAmout((Double)value);
      }
      break;

    case REAL_TOTAL_AMOUT:
      if (value == null) {
        unsetRealTotalAmout();
      } else {
        setRealTotalAmout((Double)value);
      }
      break;

    case SHIPMENT_EXPENSE:
      if (value == null) {
        unsetShipmentExpense();
      } else {
        setShipmentExpense((Double)value);
      }
      break;

    case ORDER_STATUS:
      if (value == null) {
        unsetOrderStatus();
      } else {
        setOrderStatus((Integer)value);
      }
      break;

    case ORDER_TYPE:
      if (value == null) {
        unsetOrderType();
      } else {
        setOrderType((Integer)value);
      }
      break;

    case ORDER_FROM:
      if (value == null) {
        unsetOrderFrom();
      } else {
        setOrderFrom((Integer)value);
      }
      break;

    case P_ORDER_ID:
      if (value == null) {
        unsetPOrderId();
      } else {
        setPOrderId((String)value);
      }
      break;

    case BUYER_ID:
      if (value == null) {
        unsetBuyerId();
      } else {
        setBuyerId((Integer)value);
      }
      break;

    case CONSIGNEE:
      if (value == null) {
        unsetConsignee();
      } else {
        setConsignee((String)value);
      }
      break;

    case PROVINCE:
      if (value == null) {
        unsetProvince();
      } else {
        setProvince((Integer)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((Integer)value);
      }
      break;

    case DISTRICT:
      if (value == null) {
        unsetDistrict();
      } else {
        setDistrict((Integer)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case TEL:
      if (value == null) {
        unsetTel();
      } else {
        setTel((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return getOrderId();

    case PAY_TYPE:
      return getPayType();

    case TOTAL_AMOUT:
      return getTotalAmout();

    case REAL_TOTAL_AMOUT:
      return getRealTotalAmout();

    case SHIPMENT_EXPENSE:
      return getShipmentExpense();

    case ORDER_STATUS:
      return getOrderStatus();

    case ORDER_TYPE:
      return getOrderType();

    case ORDER_FROM:
      return getOrderFrom();

    case P_ORDER_ID:
      return getPOrderId();

    case BUYER_ID:
      return getBuyerId();

    case CONSIGNEE:
      return getConsignee();

    case PROVINCE:
      return getProvince();

    case CITY:
      return getCity();

    case DISTRICT:
      return getDistrict();

    case ADDRESS:
      return getAddress();

    case TEL:
      return getTel();

    case CREATE_TIME:
      return getCreateTime();

    case UPDATE_TIME:
      return getUpdateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case PAY_TYPE:
      return isSetPayType();
    case TOTAL_AMOUT:
      return isSetTotalAmout();
    case REAL_TOTAL_AMOUT:
      return isSetRealTotalAmout();
    case SHIPMENT_EXPENSE:
      return isSetShipmentExpense();
    case ORDER_STATUS:
      return isSetOrderStatus();
    case ORDER_TYPE:
      return isSetOrderType();
    case ORDER_FROM:
      return isSetOrderFrom();
    case P_ORDER_ID:
      return isSetPOrderId();
    case BUYER_ID:
      return isSetBuyerId();
    case CONSIGNEE:
      return isSetConsignee();
    case PROVINCE:
      return isSetProvince();
    case CITY:
      return isSetCity();
    case DISTRICT:
      return isSetDistrict();
    case ADDRESS:
      return isSetAddress();
    case TEL:
      return isSetTel();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TROrder)
      return this.equals((TROrder)that);
    return false;
  }

  public boolean equals(TROrder that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_payType = true;
    boolean that_present_payType = true;
    if (this_present_payType || that_present_payType) {
      if (!(this_present_payType && that_present_payType))
        return false;
      if (this.payType != that.payType)
        return false;
    }

    boolean this_present_totalAmout = true;
    boolean that_present_totalAmout = true;
    if (this_present_totalAmout || that_present_totalAmout) {
      if (!(this_present_totalAmout && that_present_totalAmout))
        return false;
      if (this.totalAmout != that.totalAmout)
        return false;
    }

    boolean this_present_realTotalAmout = true;
    boolean that_present_realTotalAmout = true;
    if (this_present_realTotalAmout || that_present_realTotalAmout) {
      if (!(this_present_realTotalAmout && that_present_realTotalAmout))
        return false;
      if (this.realTotalAmout != that.realTotalAmout)
        return false;
    }

    boolean this_present_shipmentExpense = true;
    boolean that_present_shipmentExpense = true;
    if (this_present_shipmentExpense || that_present_shipmentExpense) {
      if (!(this_present_shipmentExpense && that_present_shipmentExpense))
        return false;
      if (this.shipmentExpense != that.shipmentExpense)
        return false;
    }

    boolean this_present_orderStatus = true;
    boolean that_present_orderStatus = true;
    if (this_present_orderStatus || that_present_orderStatus) {
      if (!(this_present_orderStatus && that_present_orderStatus))
        return false;
      if (this.orderStatus != that.orderStatus)
        return false;
    }

    boolean this_present_orderType = true;
    boolean that_present_orderType = true;
    if (this_present_orderType || that_present_orderType) {
      if (!(this_present_orderType && that_present_orderType))
        return false;
      if (this.orderType != that.orderType)
        return false;
    }

    boolean this_present_orderFrom = true;
    boolean that_present_orderFrom = true;
    if (this_present_orderFrom || that_present_orderFrom) {
      if (!(this_present_orderFrom && that_present_orderFrom))
        return false;
      if (this.orderFrom != that.orderFrom)
        return false;
    }

    boolean this_present_pOrderId = true && this.isSetPOrderId();
    boolean that_present_pOrderId = true && that.isSetPOrderId();
    if (this_present_pOrderId || that_present_pOrderId) {
      if (!(this_present_pOrderId && that_present_pOrderId))
        return false;
      if (!this.pOrderId.equals(that.pOrderId))
        return false;
    }

    boolean this_present_buyerId = true;
    boolean that_present_buyerId = true;
    if (this_present_buyerId || that_present_buyerId) {
      if (!(this_present_buyerId && that_present_buyerId))
        return false;
      if (this.buyerId != that.buyerId)
        return false;
    }

    boolean this_present_consignee = true && this.isSetConsignee();
    boolean that_present_consignee = true && that.isSetConsignee();
    if (this_present_consignee || that_present_consignee) {
      if (!(this_present_consignee && that_present_consignee))
        return false;
      if (!this.consignee.equals(that.consignee))
        return false;
    }

    boolean this_present_province = true;
    boolean that_present_province = true;
    if (this_present_province || that_present_province) {
      if (!(this_present_province && that_present_province))
        return false;
      if (this.province != that.province)
        return false;
    }

    boolean this_present_city = true;
    boolean that_present_city = true;
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (this.city != that.city)
        return false;
    }

    boolean this_present_district = true;
    boolean that_present_district = true;
    if (this_present_district || that_present_district) {
      if (!(this_present_district && that_present_district))
        return false;
      if (this.district != that.district)
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_tel = true && this.isSetTel();
    boolean that_present_tel = true && that.isSetTel();
    if (this_present_tel || that_present_tel) {
      if (!(this_present_tel && that_present_tel))
        return false;
      if (!this.tel.equals(that.tel))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetOrderId()) ? 131071 : 524287);
    if (isSetOrderId())
      hashCode = hashCode * 8191 + orderId.hashCode();

    hashCode = hashCode * 8191 + payType;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(totalAmout);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(realTotalAmout);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(shipmentExpense);

    hashCode = hashCode * 8191 + orderStatus;

    hashCode = hashCode * 8191 + orderType;

    hashCode = hashCode * 8191 + orderFrom;

    hashCode = hashCode * 8191 + ((isSetPOrderId()) ? 131071 : 524287);
    if (isSetPOrderId())
      hashCode = hashCode * 8191 + pOrderId.hashCode();

    hashCode = hashCode * 8191 + buyerId;

    hashCode = hashCode * 8191 + ((isSetConsignee()) ? 131071 : 524287);
    if (isSetConsignee())
      hashCode = hashCode * 8191 + consignee.hashCode();

    hashCode = hashCode * 8191 + province;

    hashCode = hashCode * 8191 + city;

    hashCode = hashCode * 8191 + district;

    hashCode = hashCode * 8191 + ((isSetAddress()) ? 131071 : 524287);
    if (isSetAddress())
      hashCode = hashCode * 8191 + address.hashCode();

    hashCode = hashCode * 8191 + ((isSetTel()) ? 131071 : 524287);
    if (isSetTel())
      hashCode = hashCode * 8191 + tel.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(createTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(updateTime);

    return hashCode;
  }

  @Override
  public int compareTo(TROrder other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayType()).compareTo(other.isSetPayType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payType, other.payType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalAmout()).compareTo(other.isSetTotalAmout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalAmout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalAmout, other.totalAmout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealTotalAmout()).compareTo(other.isSetRealTotalAmout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealTotalAmout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realTotalAmout, other.realTotalAmout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShipmentExpense()).compareTo(other.isSetShipmentExpense());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShipmentExpense()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shipmentExpense, other.shipmentExpense);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderStatus()).compareTo(other.isSetOrderStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderStatus, other.orderStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderType()).compareTo(other.isSetOrderType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderType, other.orderType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderFrom()).compareTo(other.isSetOrderFrom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderFrom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderFrom, other.orderFrom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPOrderId()).compareTo(other.isSetPOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pOrderId, other.pOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerId()).compareTo(other.isSetBuyerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerId, other.buyerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConsignee()).compareTo(other.isSetConsignee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsignee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consignee, other.consignee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvince()).compareTo(other.isSetProvince());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvince()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.province, other.province);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistrict()).compareTo(other.isSetDistrict());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistrict()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.district, other.district);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTel()).compareTo(other.isSetTel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tel, other.tel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TROrder(");
    boolean first = true;

    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payType:");
    sb.append(this.payType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalAmout:");
    sb.append(this.totalAmout);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realTotalAmout:");
    sb.append(this.realTotalAmout);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shipmentExpense:");
    sb.append(this.shipmentExpense);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderStatus:");
    sb.append(this.orderStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderType:");
    sb.append(this.orderType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderFrom:");
    sb.append(this.orderFrom);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pOrderId:");
    if (this.pOrderId == null) {
      sb.append("null");
    } else {
      sb.append(this.pOrderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerId:");
    sb.append(this.buyerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("consignee:");
    if (this.consignee == null) {
      sb.append("null");
    } else {
      sb.append(this.consignee);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("province:");
    sb.append(this.province);
    first = false;
    if (!first) sb.append(", ");
    sb.append("city:");
    sb.append(this.city);
    first = false;
    if (!first) sb.append(", ");
    sb.append("district:");
    sb.append(this.district);
    first = false;
    if (!first) sb.append(", ");
    sb.append("address:");
    if (this.address == null) {
      sb.append("null");
    } else {
      sb.append(this.address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tel:");
    if (this.tel == null) {
      sb.append("null");
    } else {
      sb.append(this.tel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TROrderStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TROrderStandardScheme getScheme() {
      return new TROrderStandardScheme();
    }
  }

  private static class TROrderStandardScheme extends org.apache.thrift.scheme.StandardScheme<TROrder> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TROrder struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.payType = iprot.readI32();
              struct.setPayTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_AMOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalAmout = iprot.readDouble();
              struct.setTotalAmoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REAL_TOTAL_AMOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.realTotalAmout = iprot.readDouble();
              struct.setRealTotalAmoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SHIPMENT_EXPENSE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shipmentExpense = iprot.readDouble();
              struct.setShipmentExpenseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ORDER_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderStatus = iprot.readI32();
              struct.setOrderStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ORDER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderType = iprot.readI32();
              struct.setOrderTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ORDER_FROM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderFrom = iprot.readI32();
              struct.setOrderFromIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // P_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pOrderId = iprot.readString();
              struct.setPOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BUYER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.buyerId = iprot.readI32();
              struct.setBuyerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CONSIGNEE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.consignee = iprot.readString();
              struct.setConsigneeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PROVINCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.province = iprot.readI32();
              struct.setProvinceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.city = iprot.readI32();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DISTRICT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.district = iprot.readI32();
              struct.setDistrictIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tel = iprot.readString();
              struct.setTelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TROrder struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.orderId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAY_TYPE_FIELD_DESC);
      oprot.writeI32(struct.payType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_AMOUT_FIELD_DESC);
      oprot.writeDouble(struct.totalAmout);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REAL_TOTAL_AMOUT_FIELD_DESC);
      oprot.writeDouble(struct.realTotalAmout);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHIPMENT_EXPENSE_FIELD_DESC);
      oprot.writeDouble(struct.shipmentExpense);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORDER_STATUS_FIELD_DESC);
      oprot.writeI32(struct.orderStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORDER_TYPE_FIELD_DESC);
      oprot.writeI32(struct.orderType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORDER_FROM_FIELD_DESC);
      oprot.writeI32(struct.orderFrom);
      oprot.writeFieldEnd();
      if (struct.pOrderId != null) {
        oprot.writeFieldBegin(P_ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.pOrderId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BUYER_ID_FIELD_DESC);
      oprot.writeI32(struct.buyerId);
      oprot.writeFieldEnd();
      if (struct.consignee != null) {
        oprot.writeFieldBegin(CONSIGNEE_FIELD_DESC);
        oprot.writeString(struct.consignee);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROVINCE_FIELD_DESC);
      oprot.writeI32(struct.province);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CITY_FIELD_DESC);
      oprot.writeI32(struct.city);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DISTRICT_FIELD_DESC);
      oprot.writeI32(struct.district);
      oprot.writeFieldEnd();
      if (struct.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        oprot.writeString(struct.address);
        oprot.writeFieldEnd();
      }
      if (struct.tel != null) {
        oprot.writeFieldBegin(TEL_FIELD_DESC);
        oprot.writeString(struct.tel);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.updateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TROrderTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TROrderTupleScheme getScheme() {
      return new TROrderTupleScheme();
    }
  }

  private static class TROrderTupleScheme extends org.apache.thrift.scheme.TupleScheme<TROrder> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TROrder struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOrderId()) {
        optionals.set(0);
      }
      if (struct.isSetPayType()) {
        optionals.set(1);
      }
      if (struct.isSetTotalAmout()) {
        optionals.set(2);
      }
      if (struct.isSetRealTotalAmout()) {
        optionals.set(3);
      }
      if (struct.isSetShipmentExpense()) {
        optionals.set(4);
      }
      if (struct.isSetOrderStatus()) {
        optionals.set(5);
      }
      if (struct.isSetOrderType()) {
        optionals.set(6);
      }
      if (struct.isSetOrderFrom()) {
        optionals.set(7);
      }
      if (struct.isSetPOrderId()) {
        optionals.set(8);
      }
      if (struct.isSetBuyerId()) {
        optionals.set(9);
      }
      if (struct.isSetConsignee()) {
        optionals.set(10);
      }
      if (struct.isSetProvince()) {
        optionals.set(11);
      }
      if (struct.isSetCity()) {
        optionals.set(12);
      }
      if (struct.isSetDistrict()) {
        optionals.set(13);
      }
      if (struct.isSetAddress()) {
        optionals.set(14);
      }
      if (struct.isSetTel()) {
        optionals.set(15);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(16);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetPayType()) {
        oprot.writeI32(struct.payType);
      }
      if (struct.isSetTotalAmout()) {
        oprot.writeDouble(struct.totalAmout);
      }
      if (struct.isSetRealTotalAmout()) {
        oprot.writeDouble(struct.realTotalAmout);
      }
      if (struct.isSetShipmentExpense()) {
        oprot.writeDouble(struct.shipmentExpense);
      }
      if (struct.isSetOrderStatus()) {
        oprot.writeI32(struct.orderStatus);
      }
      if (struct.isSetOrderType()) {
        oprot.writeI32(struct.orderType);
      }
      if (struct.isSetOrderFrom()) {
        oprot.writeI32(struct.orderFrom);
      }
      if (struct.isSetPOrderId()) {
        oprot.writeString(struct.pOrderId);
      }
      if (struct.isSetBuyerId()) {
        oprot.writeI32(struct.buyerId);
      }
      if (struct.isSetConsignee()) {
        oprot.writeString(struct.consignee);
      }
      if (struct.isSetProvince()) {
        oprot.writeI32(struct.province);
      }
      if (struct.isSetCity()) {
        oprot.writeI32(struct.city);
      }
      if (struct.isSetDistrict()) {
        oprot.writeI32(struct.district);
      }
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
      if (struct.isSetTel()) {
        oprot.writeString(struct.tel);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TROrder struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.payType = iprot.readI32();
        struct.setPayTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalAmout = iprot.readDouble();
        struct.setTotalAmoutIsSet(true);
      }
      if (incoming.get(3)) {
        struct.realTotalAmout = iprot.readDouble();
        struct.setRealTotalAmoutIsSet(true);
      }
      if (incoming.get(4)) {
        struct.shipmentExpense = iprot.readDouble();
        struct.setShipmentExpenseIsSet(true);
      }
      if (incoming.get(5)) {
        struct.orderStatus = iprot.readI32();
        struct.setOrderStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.orderType = iprot.readI32();
        struct.setOrderTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.orderFrom = iprot.readI32();
        struct.setOrderFromIsSet(true);
      }
      if (incoming.get(8)) {
        struct.pOrderId = iprot.readString();
        struct.setPOrderIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.buyerId = iprot.readI32();
        struct.setBuyerIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.consignee = iprot.readString();
        struct.setConsigneeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.province = iprot.readI32();
        struct.setProvinceIsSet(true);
      }
      if (incoming.get(12)) {
        struct.city = iprot.readI32();
        struct.setCityIsSet(true);
      }
      if (incoming.get(13)) {
        struct.district = iprot.readI32();
        struct.setDistrictIsSet(true);
      }
      if (incoming.get(14)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
      if (incoming.get(15)) {
        struct.tel = iprot.readString();
        struct.setTelIsSet(true);
      }
      if (incoming.get(16)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

